1. What happens when you initialize a repository? Why do you need to do it?
	It makes a regular dir in my local system a git repo (done by using git init in the dir I want to be a git repo)
	There's a hidden file .git when it is initialized. Note: There's no commit when it is intialized unless a manual commit is done

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
	Repository is the Git repo which has all the files that are commited plus the history
	Working Directory is the directory in which we've the files locally
	Staging area is the intermediate stage. We push those files from working dir. to staging area, which we want to commit. 

	We might not want to commit all the files in the working dir. Staging area allows us to 'stage' the files to commit.

3. How can you use the staging area to make sure you have one commit per logical change?
	By adding and commit only those files that makes logical sense

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When there's a new experimental feature that we aren't yet sure to be added to the main version, or any context-switching where we want to work 
	on something different,  branches are helpful. It helps in keeping the master branch as a production ready code and allow us to tinker our code.
	We can use branches by creating a new snapshot of the repo and make changes without affecting the main (master) branch and then merge when we're ready

5. How do the diagrams help you visualize the branch structure?
	1. What's the parent commit of each branch/commit
	2. Which commit is reachable and which is not
	3. Where does the branch seperate from the master and where it merges back - esp. useful when there multiple branches 

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	It merges all the changes of the branch onto the checked out branch. The tip of the branch, will have the name based on what branch is currently checked out.

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Pros: Easy. Don't have to manually look at all the lines. Esp useful when multiple people are working on the same code. 
	Cons: This relies on certain assumptions and they have to understood by everyone, so an inadvertent change doesn't slip in 
